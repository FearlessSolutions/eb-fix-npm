# This file is controlled by the `eb-fix-npm` Node module. If you'd like to
# modify it, you either should publish a new version of that module and update
# to that version; or, you should uninstall that module and then edit this file
# --uninstallation won't take the file with it.

# This file contains fixes for npm. Node is installed using a hook called
# "40install_node.sh" and `npm install` is run using a hook called "50npm.sh",
# so npm setup should be done in hooks beginning with "4x" (x > 0)
# and cleanup should be done in hooks beginning with "5x" (x > 0).

files:
  "/opt/elasticbeanstalk/env.vars":
    mode: "000775"
    owner: root
    group: users
    content: |
      # Exports variables for use by the other scripts below.
      
      # Make sure Node binaries can be found (required to run npm).
      # And this lets us invoke npm more simply too.
      export PATH=/opt/elasticbeanstalk/node-install/node-v6.9.1-linux-x64/bin:$PATH

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/45npm_downgrade.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Downgrade npm to npm 2 because npm 3 is too slow to install for EB.

      . /opt/elasticbeanstalk/env.vars

      if [ $(npm -v) != "2.15.9" ]; then
        echo "Downgrading npm to 2.15.9..."
        npm install npm@2.15.9 -g
      else
        echo "npm already at 2.15.9"
      fi

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/46cache_node_modules.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Cache Node modules in /var.
      
      if [ ! -d "/var/node_modules" ]; then
        mkdir /var/node_modules ;
      fi
      ln -s /var/node_modules /tmp/deployment/application/

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/50npm.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Only install modules, don't rebuild like Elastic Beanstalk does by default:
      # https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663.
      # since new modules will be built when they are installed, and cached
      # modules don't need to be rebuilt. When the Node version changes, the
      # configdeploy script will rebuild.
      #
      # Note that this *overwrites* Elastic Beanstalk's default 50npm.sh script.
      
      . /opt/elasticbeanstalk/env.vars

      cd /tmp/deployment/application && npm install --production

  "/opt/elasticbeanstalk/hooks/appdeploy/pre/55npm_cleanup.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Remove all npm tmp files leftover by npm shrinkwrap flow.
      # https://github.com/npm/npm/issues/6855

      rm -rf /tmp/npm-*

  "/opt/elasticbeanstalk/hooks/configdeploy/pre/50npm.sh":
    mode: "000755"
    owner: root
    group: users
    content: |
      #!/usr/bin/env bash
      #
      # Only rebuild modules, don't install like Elastic Beanstalk does by default:
      # https://gist.github.com/wearhere/de51bb799f5099cec0ed28b9d0eb3663.
      # package.json isn't changing on a config deploy, and all the existing
      # modules should be cached.
      
      . /opt/elasticbeanstalk/env.vars

      cd /tmp/deployment/application && npm rebuild --production
